DANA EQU 20H
RBIT EQU 21H
PBIT EQU 22H
KLAWISZ EQU 23H
ZNAK1 EQU 24H
ZNAK2 EQU 25H
ZNAK3 EQU 26H
ZNAK4 EQU 27H
POZYCJA1 EQU 28H	; pozycja na gornej linii LCD
POZYCJA2 EQU 29H	; pozycja na dolnej linii LCD
ZNAK_KRESKA EQU 30H
ZNAK_KROPKA EQU 31H
ZNAK_SPACJA EQU 32H
ZNAK EQU 33H		; wysietlany znak

LED EQU P1.7
BUZZ EQU P1.5

	LJMP START
	ORG 23H ;PRZERWANIE 23 Z RS(TRANSMISJA SZEREGOWA)
	LJMP LINIA

START:
	LCALL LCD_INIT

	MOV KLAWISZ, #30H
	
	MOV ZNAK_KRESKA,#2DH
	MOV ZNAK_KROPKA,#2EH
	MOV ZNAK_SPACJA,#20H
	MOV ZNAK, #3FH
	MOV ZNAK1,#0
	MOV ZNAK2,#0
	MOV ZNAK3,#0
	MOV ZNAK4,#0
	MOV POZYCJA1,#0
	MOV POZYCJA2,#40H
	MOV DANA,#0
	MOV RBIT,#0
	MOV PBIT, #0
	MOV TMOD,#21H
	MOV TH0, #256-36 ;starszy bajt licznika t0
	MOV TL0, #0		 ;mlodszy bajt licznika t0
	MOV TH1, #256-24 ;starszy bajt licznika t1
	MOV TL1, #256-24 ;mlodszy bajt licznika t1
	
	MOV SCON,#(3)*64+1*16;sterowanie portem szeregowym
						 ;1*16 - odbior aktywny
						 ;3*64 - trzeci tryb pracy (asynchr, z kontr parzystosci)
						 ;       tr. w takt t1 w trybie 2 czylli
						 ;- TL pracuje jako licznik 8-bitowy
						 ;- TH zawiera wartość początkową wpisywaną do TL po przepełnieniu
	ORL PCON, #128 ;sterowanie zasilaniem, ustawiamy 10000000 czyli
				   ;normalny pobor, podwojna szybkoc transmisji szeregowej
	LCALL WAIT_KEY ;OKNO DSM WLACZONE -> LINIA ZAJETA
	SETB TR1 ;wlacz licznik T1, rozpoczyna zliczanie
	SETB ES	;odblokuj przerwania z portu szeregowego (Enable Serial)
	SETB EA ;odblokuj system przerwan (Enable All)
	SETB TI ;wskaźnik przerwania nadanej danej (Transmit Interrupt) czyli ok
	
GLOWNY:
	LCALL CZYT_KLAWISZ
	JB ACC.0, KLAW_0
	JB ACC.1, KLAW_1
	JB ACC.2, KLAW_2
	JB ACC.3, KLAW_3
	JB ACC.4, KLAW_4
	JB ACC.5, KLAW_5
	JB ACC.6, KLAW_6
	JB ACC.7, KLAW_7
	JB B.0, KLAW_8
	JB B.1, KLAW_9
	JB B.2, KLAW_A
	JB B.3, KLAW_B
	JB B.4, KLAW_C
	JB B.5, KLAW_D
	JB B.6, KLAW_ESC
	JB B.7, KLAW_ENT
	SJMP GLOWNY
	
KLAW_0:
	LJMP LED_CHANGE	
KLAW_1:
	LJMP LED_CHANGE	
KLAW_2:
	LJMP LED_CHANGE	
KLAW_3:
	LJMP LED_CHANGE	
KLAW_4:
	LJMP LED_CHANGE	
KLAW_5:
	LJMP LED_CHANGE	
KLAW_6:
	LJMP LED_CHANGE	
KLAW_7:
	LJMP LED_CHANGE	
KLAW_8:
	LJMP LED_CHANGE	
KLAW_9:
	LJMP LED_CHANGE	
KLAW_A: 
	LJMP LED_CHANGE
KLAW_B: 
	LJMP LED_CHANGE
KLAW_C: 
	LJMP LED_CHANGE
KLAW_D: 
	LJMP LED_CHANGE
KLAW_ENT: 
	LJMP KLAW_ENT_OBS
KLAW_ESC:
	LJMP KLAW_ESC_OBS
	
;program od poczatku
KLAW_ENT_OBS:
	;wyczysc gorna linie
	MOV A, #0H
	LCALL USTAW_KURSOR
	MOV DPTR, #WHITE_LINE
	LCALL WRITE_TEXT
	
	MOV A, #40H
	LCALL USTAW_KURSOR
	MOV DPTR, #WHITE_LINE
	LCALL WRITE_TEXT
	MOV POZYCJA1, #0
	MOV POZYCJA2, #0
	LJMP START
	
;wyczysc gorna linie
KLAW_ESC_OBS:
	MOV A, #0
    LCALL USTAW_KURSOR	; wypisanie ALARM
    MOV DPTR, #WHITE_LINE
    LCALL WRITE_TEXT
	MOV A, #0
    LCALL USTAW_KURSOR	; wypisanie ALARM
	MOV POZYCJA1, #0
	MOV ZNAK1,#0
	MOV ZNAK2,#0
	MOV ZNAK3,#0
	MOV ZNAK4,#0
	
	LJMP GLOWNY

LED_CHANGE:
	CPL LED
	AJMP GLOWNY

LINIA:
	PUSH PSW
	PUSH ACC
	PUSH 0 
	PUSH 1
	JB RI, ODBIERZ
	LJMP WYJSCIE
	
BUZZER:
	CLR BUZZ ;WLACZ BRZECZYK
	LJMP WYJSCIE
	
ODBIERZ:
	MOV A, SBUF
	MOV C, RB8 ;RB8 PRZYCHODZI Z RAMKA JAKO KONTROLA PARZYSTOSCI
	MOV RBIT.0, C
	MOV C, P
	MOV PBIT.0, C
	CLR RI ;ODEBRALEM DANA - GASZE RI
	MOV DANA, A ;ZAPIS ZMIENNEJ BO ZNISZCZYMY AKUMULATOR
	MOV A, RBIT
	XRL A, PBIT ;SPRAWDZAMY PRZYSTOSC
	JNZ BUZZER ;JEZELI PARZYSTOSC NIE OK, TO WŁĄCZAMY BUZZER

	MOV A, DANA
	XRL A, #30H
	MOV ZNAK, ZNAK_KROPKA
	JZ MORSE_FUN
	
	MOV A, DANA
	XRL A, #31H
	MOV ZNAK, ZNAK_KRESKA
	JZ MORSE_FUN
	
	MOV A, DANA
	XRL A, #20H
	MOV ZNAK, ZNAK_SPACJA
	JZ RECOGNITION
	
	LJMP WYJSCIE

MORSE_FUN:
	MOV A, ZNAK1
	JZ SAVE_1
	MOV A, ZNAK2
	JZ SAVE_2
	MOV A, ZNAK3
	JZ SAVE_3
	MOV A, ZNAK4
	JZ SAVE_4
	LJMP WYJSCIE
	
SAVE_1:
	MOV ZNAK1, DANA
	LJMP MORSE_DRAW
SAVE_2:
	MOV ZNAK2, DANA
	LJMP MORSE_DRAW
SAVE_3:
	MOV ZNAK3, DANA
	LJMP MORSE_DRAW
SAVE_4:
	MOV ZNAK4, DANA
	LJMP MORSE_DRAW
	
MORSE_DRAW:
	MOV A, POZYCJA1		; wyświetlenie aktualnego znaku
	LCALL USTAW_KURSOR
	MOV A, ZNAK
	LCALL WRITE_DATA
	
	INC POZYCJA1
	
	LJMP WYJSCIE
; ----------------------------------------------------------------------
; drzewo rozpoznania
RECOGNITION:
	MOV A, ZNAK1
	XRL A, #30H
	JZ MORSE_E
	
	MOV A, ZNAK1
	XRL A, #31H
	JZ T_HELP
	
	LJMP WYJSCIE

T_HELP:
	LJMP MORSE_T

MORSE_E:
	MOV A, ZNAK2
	XRL A, #30H
	JZ MORSE_I
	
	MOV A, ZNAK2
	XRL A, #31H
	JZ A_HELP

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #45H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE

A_HELP:
	LJMP MORSE_A
	
MORSE_I:
	MOV A, ZNAK3
	XRL A, #30H
	JZ MORSE_S
	
	MOV A, ZNAK3
	XRL A, #31H
	JZ MORSE_U

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #49H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_S:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_H
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE_V

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #53H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE

MORSE_H:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #48H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE
	
MORSE_V:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #56H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_U:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_F
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE__

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #55H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_F:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #46H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
; pierwsza galaz
	
MORSE_A:
	MOV A, ZNAK3
	XRL A, #30H
	JZ MORSE_R
	
	MOV A, ZNAK3
	XRL A, #31H
	JZ MORSE_W

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #41H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE
	
MORSE_R:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_L
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE__


	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #52H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE
	
MORSE__:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #3fH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_L:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4CH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_W:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_P
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE_J

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #57H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE
	
MORSE_P:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #50H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_J:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4AH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
; druga galaz
	
MORSE_T:
	MOV A, ZNAK2
	XRL A, #30H
	JZ MORSE_N
	
	MOV A, ZNAK2
	XRL A, #31H
	JZ M_HELP

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #54H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE

M_HELP:
	LJMP MORSE_M
	
MORSE_N:
	MOV A, ZNAK3
	XRL A, #30H
	JZ MORSE_D
	
	MOV A, ZNAK3
	XRL A, #31H
	JZ MORSE_K

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4EH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE

MORSE_D:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_B
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE_X

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #44H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_B:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #42H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_X:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #58H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_K:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_C
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE_Y

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4BH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_C:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #43H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_Y:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #59H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_M:
	MOV A, ZNAK3
	XRL A, #30H
	JZ MORSE_G
	
	MOV A, ZNAK3
	XRL A, #31H
	JZ MORSE_O

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4DH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_G:
	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE_Z
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE_Q

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #47H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	
	
MORSE_Z:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #5AH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_Q:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #51H
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE_O:

	MOV A, ZNAK4
	XRL A, #30H
	JZ MORSE___
	
	MOV A, ZNAK4
	XRL A, #31H
	JZ MORSE___

	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #4FH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE	

MORSE___:
	MOV A, POZYCJA2	
	LCALL USTAW_KURSOR
	MOV A, #3fH
	LCALL WRITE_DATA
	INC POZYCJA2
	LJMP SPACE_MODE		

SPACE_MODE:
	MOV A, #0
    LCALL USTAW_KURSOR	; wyczyszczenie gornej
    MOV DPTR, #WHITE_LINE
    LCALL WRITE_TEXT
	MOV ZNAK1, #0
	MOV ZNAK2, #0
	MOV ZNAK3, #0
	MOV ZNAK4, #0
	MOV POZYCJA1, #0
	MOV A, #0
    LCALL USTAW_KURSOR	; wyczyszczenie gornej
	LJMP WYJSCIE

WYJSCIE:
	POP 1
	POP 0
	POP ACC
	POP PSW
	RETI
			
;ustaw kursor (we:A)
USTAW_KURSOR:
			LCALL LCD_GOTOWY
			PUSH PSW
			PUSH ACC
			PUSH DPL
			PUSH DPH
			ORL A,#80H
			MOV DPTR, #LCDWC + 0FF00H
			MOVX @DPTR, A
			POP DPH
			POP DPL
			POP ACC
			POP PSW
			RET
			
;PISZ ZNAK (WE:A ASCII)
PISZ_ZNAK:
			LCALL LCD_GOTOWY
			PUSH PSW
			PUSH ACC
			PUSH DPL
			PUSH DPH
			MOV DPTR, #LCDWD+0FF00H
			MOVX @DPTR, A
			POP DPH
			POP DPL
			POP ACC
			POP PSW
			RET
			
LCD_GOTOWY:
			PUSH PSW
			PUSH ACC
			PUSH DPL
			PUSH DPH
			MOV DPTR,#LCDRC+0FF00H
ODCZEKAJ:
			MOVX A,@DPTR
			JB ACC.7, ODCZEKAJ; Jezeli bit ACC.7 == 1, gotowy
			POP DPH
			POP DPL
			POP ACC
			POP PSW
			RET
; pisanie linii
PISZ_TEKST:
            JZ WYKONANE; skok gdy A=0
            PUSH PSW
            PUSH B
            MOV B, A
            CLR  A  ; zeruj akumulator
            PUSH ACC; a potem go zapamietej ? mamy pamiętać pusty ?
           
POWTARZAJ:
            POP ACC; czyli mamy tu pusty
            PUSH ACC
            MOVC A, @A+DPTR
            JZ TERMINATOR
            LCALL PISZ_ZNAK
            POP ACC
            INC A
            PUSH ACC
            DJNZ B, POWTARZAJ; skok gdy B!=0, skoro B jest nie używane to po co to ?
           
TERMINATOR:
            POP ACC
            POP B
            POP PSW
           
WYKONANE:
            RET
			
;czytanie klawiatury
;wy A - statust klawiszy 0-7, B -status klawiszy 8-F
CZYT_KLAWISZ:
			PUSH PSW
			MOV A,R0
			PUSH ACC
			MOV A, R1
			PUSH ACC
			
ZAJETE:
			MOV A, #4
			LCALL DELAY_MS
			MOV R0, #CSKB0
			MOV R1, #CSKB1
			MOVX A, @R0
			CPL A
			MOV B,A
			MOVX A,@R1
			CPL A ;odwr bity na przeciwne
			ORL A, B
			JNZ ZAJETE
			
WOLNE:
			MOV A,#4
			LCALL DELAY_MS
			;LCALL MOJA_AKCJA
			MOV R0, #CSKB0
			MOV R1, #CSKB1
			MOVX A,@R0
			CPL A
			MOV B, A
			MOVX A,@R1
			CPL A
			XCH A, B ;X-CHANGE
			PUSH ACC
			PUSH B
			ORL A, B
			JNZ WYKRYTE
			POP B
			POP ACC
			SJMP WOLNE
			
WYKRYTE:
			MOV A,#4
			LCALL DELAY_MS
			;LCALL MOJA_AKCJA
			MOV R0, #CSKB0
			MOV R1, #CSKB1
			MOVX A, @R0
			CPL A
			MOV R0, A
			MOVX A, @R1
			CPL A
			MOV R1, A
			POP B
			POP ACC
			XRL A,R0
			JNZ WOLNE
			MOV A, B; Ja tu nic nie mam
			XRL A, R1
			JNZ WOLNE
			POP ACC
			XCH A,R1; Tu też nic nie mam
			MOV B, A
			POP ACC
			XCH A,R0
			POP PSW
			RET
WHITE_LINE:
            DB '                ',0